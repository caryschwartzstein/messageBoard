{"version":3,"sources":["utils/setAuthToken.js","actions/authActions.js","actions/types.js","components/Post.js","api/posts.js","components/PostList.js","components/NewPost.js","components/Home.js","components/LoginModal.js","components/NavBar.js","reducers/postReducer.js","reducers/authReducer.js","reducers/errorReducer.js","reducers/rootReducer.js","store.js","App.js","serviceWorker.js","index.js"],"names":["setAuthToken","token","axios","defaults","headers","common","loginUser","userData","closeModalFunc","dispatch","console","log","post","then","res","data","localStorage","setItem","decoded","jwt_decode","setCurrentUser","catch","err","type","payload","response","logoutUser","removeItem","Post","props","state","content","prevProps","this","setState","colors","randomcolor","Math","floor","random","length","Typography","PostCard","elevation","CardContent","Poster","container","spacing","Grid","item","StyledAvatar","name","Name","align","style","paddingLeft","React","Component","styled","Card","Avatar","a","get","user_id","newPost","user","PostList","fetchAllPosts","posts","toRender","map","key","_id","connect","Alert","variant","NewPost","auth","value","open","isEmpty","id","handleChange","bind","onSubmit","setOpen","handleClose","boolean","event","reason","target","color","width","TextField","margin","paddingTop","placeholder","fullWidth","onChange","InputLabelProps","shrink","Button","onClick","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","severity","Paper","Home","backgroundColor","minHeight","padding","LoginModal","handleOpen","toggleBack","e","switchPurpose","purpose","login","otherPurpose","description","errors","newUser","email","password","password2","registerUser","nextProps","modalOpen","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","StyledTextField","label","error","className","classnames","invalid","justify","loginData","useState","toggleModal","setToggleModal","anchorEl","setAnchorEl","Boolean","styles","flexGrow","AppBar","position","Toolbar","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","transformOrigin","MenuItem","initialState","require","isAuthenticated","loading","combineReducers","action","concat","Store","createStore","rootReducer","compose","applyMiddleware","thunk","window","devToolsExtension","f","App","jwtToken","currentTime","Date","now","exp","location","href","store","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+LAUeA,EARM,SAAAC,GACbA,EACAC,IAAMC,SAASC,QAAQC,OAAvB,cAAiDJ,SAE1CC,IAAMC,SAASC,QAAQC,OAAvB,eCoBFC,EAAY,SAACC,EAAUC,GAAX,OAA8B,SAAAC,GACnDC,QAAQC,IAAI,cACZT,IACKU,KAAK,mBAAoBL,GACzBM,MAAK,SAAAC,GAAQ,IACFb,EAAUa,EAAIC,KAAdd,MACRe,aAAaC,QAAQ,WAAYhB,GACjCD,EAAaC,GACb,IAAMiB,EAAUC,IAAWlB,GAC3BO,IACAC,EAASW,EAAeF,OAE3BG,OAAM,SAAAC,GAAG,OACNb,EAAS,CACLc,KCrCU,aDsCVC,QAASF,EAAIG,SAASV,YAKzBK,EAAiB,SAAAF,GAC1B,MAAO,CACHK,KC3CwB,mBD4CxBC,QAASN,IAUJQ,EAAa,kBAAM,SAAAjB,GAC5BO,aAAaW,WAAW,YACxB3B,GAAa,GACbS,EAASW,EAAe,O,mhBExDtBQ,E,YAEF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,QAASF,EAAME,SAHJ,E,gFAOAC,GACXC,KAAKJ,MAAME,UAAYC,EAAUD,SACjCE,KAAKC,SAAS,CACVH,QAASE,KAAKJ,MAAME,Y,+BAMhC,IAAII,EAAS,CACT,SACA,QACA,MACA,OACA,QAGAC,EAAcD,EAAOE,KAAKC,MAAMD,KAAKE,SAASJ,EAAOK,SAEzD,OACI,6BACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAD,CAAUC,UAAW,GACrB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAD,CAAQC,WAAS,EAACC,QAAS,GACvB,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACC,EAAD,CAAcd,YAAaA,GAAcH,KAAKJ,MAAMsB,KAAK,KAE7D,kBAACH,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACG,EAAD,KACKnB,KAAKJ,MAAMsB,QAKxB,kBAACV,EAAA,EAAD,CAAYY,MAAM,OAAOC,MAAO,CAACC,YAAa,SACzCtB,KAAKH,MAAMC,gB,GA7CbyB,IAAMC,WAwDnBf,EAAWgB,YAAOC,IAAPD,CAAH,KAKRR,EAAeQ,YAAOE,IAAPF,CAAH,KACM,SAAA7B,GAAK,OAAIA,EAAMO,eAEjCS,EAASa,YAAOV,IAAPU,CAAH,KAGNN,EAAOM,YAAOjB,IAAPiB,CAAH,KAIK9B,I,qEC3ER,sBAAAiC,EAAA,+EACI3D,IAAM4D,IAAI,kBACZjD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBM,OAAM,SAAAC,GAAG,OAAIZ,QAAQC,IAAIW,OAH3B,4C,kEAOA,WAAuBS,EAASoB,EAAMY,GAAtC,eAAAF,EAAA,6DAECG,EAAU,CACVjC,QAASA,EACTkC,KAAMF,EACNZ,QALD,kBAOIjD,IAAMU,KAAK,oBAAqBoD,GAClCnD,MAAK,SAAAC,GAEF,OADAJ,QAAQC,IAAI,gBACLG,EAAIC,QAEdM,OAAM,SAAAC,GAAG,OAAIZ,QAAQC,IAAIW,OAZ3B,4C,kCCDD4C,E,4LAEmB,IAAD,QDRjB,WAAP,gCCSQC,GACKtD,MAAK,SAAAE,GAAI,OAAI,EAAKc,MAAMpB,SAAS,CAACc,KHZlB,gBGYuC6C,MAAOrD,S,+BAInE,IAAIsD,EAAWpC,KAAKJ,MAAMuC,OAAS,GACnC,OACI,kBAACpB,EAAA,EAAD,KACKqB,EAASC,KAAK,SAAA1D,GAAI,OACf,kBAAC,EAAD,CAAMuC,KAAMvC,EAAKuC,KAAMoB,IAAK3D,EAAK4D,IAAKzC,QAASnB,EAAKmB,kB,GAZjDyB,IAAMC,WAuBdgB,eAJS,SAAC3C,GAAD,MAAY,CAChCsC,MAAOtC,EAAMlB,KAAKwD,SAGPK,CAAyBP,G,8aCtBxC,SAASQ,GAAM7C,GACX,OAAO,kBAAC,IAAD,eAAUc,UAAW,EAAGgC,QAAQ,UAAa9C,I,IAGlD+C,G,YAEF,WAAY/C,GAAQ,IAAD,sBACf,4CAAMA,IADS,IAGRoC,EAAQpC,EAAMgD,KAAdZ,KAHQ,OAKf,EAAKnC,MAAQ,CACTgD,MAAO,GACPC,MAAM,EACN5B,KAAO6B,IAAQf,GAAS,GAAKA,EAAKd,KAClCY,QAAUiB,IAAQf,GAAS,GAAKA,EAAKgB,IAGzC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKE,QAAU,EAAKA,QAAQF,KAAb,gBACf,EAAKG,YAAc,EAAKA,YAAYH,KAAjB,gBAfJ,E,qEAkBXI,GACJtD,KAAKC,SAAS,CAAC6C,KAAMQ,M,kCAGbC,EAAOC,GACfxD,KAAKoD,SAAQ,K,mCAGJG,GACTvD,KAAKC,SAAS,CAAC4C,MAAOU,EAAME,OAAOZ,U,iCAG1B,IAAD,OACAb,EAAShC,KAAKJ,MAAMgD,KAApBZ,KACJe,IAAQf,GACRhC,KAAKoD,SAAQ,IAEb3E,QAAQC,IAAIsB,KAAKH,MAAMqB,MFzC5B,SAAP,sCE0CYa,CAAQ/B,KAAKH,MAAMgD,MAAO7C,KAAKH,MAAMqB,KAAMlB,KAAKH,MAAMiC,SACrDlD,MAAK,SAAAmD,GACF,EAAKnC,MAAMpB,SAAS,CAACc,KJpDb,WIoD6ByC,YACrC,EAAK9B,SAAS,CACV4C,MAAO,W,+BASnB,OACI,kBAAC,GAAD,KACI,kBAAClC,EAAA,EAAD,KACI,kBAAC,GAAD,CAAQE,WAAS,EAACC,QAAS,GACvB,kBAACC,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,GAAD,CAAc0C,MAAO,UAAW1D,KAAKH,MAAMqB,KAAK,KAEpD,kBAACH,EAAA,EAAD,CAAMC,MAAI,EAACK,MAAO,CAACsC,MAAO,QACtB,kBAACC,EAAA,EAAD,CACIvC,MAAO,CAAEwC,OAAQ,EAAGC,WAAY,IAChCC,YAAY,uBACZC,WAAS,EACTH,OAAO,SACPI,SAAUjE,KAAKiD,aACfJ,MAAO7C,KAAKH,MAAMgD,MAClBqB,gBAAiB,CACbC,QAAQ,MAIpB,kBAACpD,EAAA,EAAD,CAAMC,MAAI,GACN,kBAACoD,EAAA,EAAD,CAAQ1B,QAAQ,YAAYgB,MAAM,UAAUW,QAASrE,KAAKmD,UAA1D,WAKR,kBAACmB,EAAA,EAAD,CACIC,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAC7CnC,IAAG,cACHQ,KAAM9C,KAAKH,MAAMiD,KACjB4B,iBAAkB,IAClBC,QAAS3E,KAAKqD,aAEd,kBAAC,GAAD,CAAOsB,QAAS3E,KAAKqD,YAAauB,SAAS,SAA3C,sD,GApFFrD,IAAMC,WAkGbgB,gBAJS,SAAA3C,GAAK,MAAK,CAC9B+C,KAAM/C,EAAM+C,QAGDJ,CAAyBG,IAElClC,GAAWgB,YAAOoD,IAAPpD,CAAH,MAMRR,GAAeQ,YAAOE,IAAPF,CAAH,MACM,SAAA7B,GAAK,OAAIA,EAAM8D,SAEjC9C,GAASa,YAAOV,IAAPU,CAAH,KCxGGqD,GAZF,WACT,OACI,yBAAKzD,MAAO,CAAC0D,gBAAiB,OAAQC,UAAW,OAAQC,QAAS,SAC9D,kBAAClE,EAAA,EAAD,CAAMK,MAAM,UACR,kBAAC,GAAD,CAASF,KAAK,aACd,kBAAC,EAAD,S,+hBCFVgE,G,YAEF,WAAYtF,GAAQ,IAAD,8BACf,4CAAMA,KA+BVuF,WAAa,WACT,EAAKlF,SAAS,CAAC6C,MAAM,KAjCN,EAoCnBO,YAAc,WACV,EAAKpD,SAAS,CAAC6C,MAAM,IACrB,EAAKlD,MAAMwF,cAtCI,EAyCnBnB,SAAW,SAAAoB,GACP,EAAKpF,SAAL,gBAAiBoF,EAAE5B,OAAOT,GAAKqC,EAAE5B,OAAOZ,SA1CzB,EA6CnByC,cAAgB,WACe,UAAvB,EAAKzF,MAAM0F,QACX,EAAKtF,SAAS,CACVuF,OAAO,EACPD,QAAS,WACTE,aAAc,QACdC,YAAa,qDACbC,OAAQ,KAGZ,EAAK1F,SAAS,CACVuF,OAAO,EACPD,QAAS,QACTE,aAAc,WACdC,YAAa,yEACbC,OAAQ,MA5DD,EAkEnBxC,SAAW,WACP,GAAK,EAAKtD,MAAM2F,MAQT,CACH,IAAMI,EAAU,CACZC,MAAO,EAAKhG,MAAMgG,MAClBC,SAAU,EAAKjG,MAAMiG,UAEvB,EAAKlG,MAAMvB,UAAUuH,EAAS,EAAKvC,iBAblB,CACnB,IAAMuC,EAAU,CACZ1E,KAAM,EAAKrB,MAAMqB,KACjB2E,MAAO,EAAKhG,MAAMgG,MAClBC,SAAU,EAAKjG,MAAMiG,SACrBC,UAAW,EAAKlG,MAAMkG,WAE1B,EAAKnG,MAAMoG,aAAaJ,EAAS,EAAKvC,eAxE1C,EAAKxD,MAAQ,CACTiD,MAAM,EACN0C,OAAO,EACPD,QAAS,QACTE,aAAc,WACdC,YAAa,yEACbxE,KAAM,GACN2E,MAAO,GACPC,SAAU,GACVC,UAAW,GACXJ,OAAQ,IAZG,E,uFAgBOM,GAClBA,EAAUN,QACZ3F,KAAKC,SAAS,CACZ0F,OAAQM,EAAUN,W,yCAKP5F,GACXC,KAAKJ,MAAMsG,YAAcnG,EAAUmG,WAC/BlG,KAAKJ,MAAMsG,WACXlG,KAAKmF,e,+BA0DP,IACEQ,EAAW3F,KAAKH,MAAhB8F,OACR,OACI,6BAII,kBAACQ,GAAA,EAAD,CACAC,kBAAgB,qBAChBC,mBAAiB,2BACjBvD,KAAM9C,KAAKH,MAAMiD,KACjB6B,QAAS3E,KAAKqD,aACV,kBAACiD,GAAA,EAAD,CAAatD,GAAG,qBAAqBhD,KAAKH,MAAM0F,SAChD,kBAACgB,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,KACI,8BAAOxG,KAAKH,MAAM6F,eAGnB1F,KAAKH,MAAM2F,OACd,6BACA,kBAACiB,GAAD,CACIzD,GAAG,OACH1D,KAAK,OACLoH,MAAM,OACN7D,MAAO7C,KAAKH,MAAMqB,KAClB+C,SAAUjE,KAAKiE,SACf0C,MAAOhB,EAAOzE,KACd0F,UAAWC,KAAW,GAAI,CAACC,QAASnB,EAAOzE,SAC/C,0BAAM0F,UAAU,YAAYjB,EAAOzE,OAEnC,kBAACuF,GAAD,CACIzD,GAAG,QACH0D,MAAM,SACNpH,KAAK,QACLuD,MAAO7C,KAAKH,MAAMgG,MAClB5B,SAAUjE,KAAKiE,SACf0C,MAAOhB,EAAOE,MACdnC,MAAM,YACV,kBAAC+C,GAAD,CACIzD,GAAG,WACH0D,MAAM,WACNpH,KAAK,WACLuD,MAAO7C,KAAKH,MAAMiG,SAClB7B,SAAUjE,KAAKiE,SACf0C,MAAOhB,EAAOG,YACf9F,KAAKH,MAAM2F,OACd,kBAACiB,GAAD,CACIzD,GAAG,YACH0D,MAAM,mBACNpH,KAAK,WACLuD,MAAO7C,KAAKH,MAAMkG,UAClB9B,SAAUjE,KAAKiE,SACf0C,MAAOhB,EAAOI,aAItB,kBAAChF,EAAA,EAAD,CAAMF,WAAS,EAACkG,QAAQ,iBACpB,kBAAChG,EAAA,EAAD,CAAMC,MAAI,GAAC,kBAACoD,EAAA,EAAD,CAAQ/C,MAAO,CAACwC,OAAQ,QAASH,MAAM,UAAUW,QAASrE,KAAKsF,eAAgBtF,KAAKH,MAAM4F,eACrG,kBAAC1E,EAAA,EAAD,CAAMC,MAAI,GAAC,kBAACoD,EAAA,EAAD,CAAQ/C,MAAO,CAACwC,OAAQ,QAASnB,QAAQ,YAAYgB,MAAM,UAAUW,QAASrE,KAAKmD,UAAWnD,KAAKH,MAAM0F,iB,GAjJnHhE,IAAMC,WAgKhBgB,gBALS,SAAA3C,GAAK,MAAK,CAC9B+C,KAAM/C,EAAM+C,KACZ+C,OAAQ9F,EAAM8F,UAKd,CAAEK,aPjKsB,SAAC1H,EAAUC,GAAX,OAA8B,SAAAC,GACtD,IAAMwI,EAAY,CACdnB,MAAOvH,EAASuH,MAChBC,SAAUxH,EAASwH,UAEvB7H,IACKU,KAAK,sBAAuBL,GAC5BM,MAAK,SAAAC,GAAG,OAAIL,EAASH,EAAU2I,EAAWzI,OAC1Ca,OAAM,SAAAC,GAAG,OACNb,EAAS,CACLc,KCjBU,aDkBVC,QAASF,EAAIG,SAASV,YOsJlBT,aAFLmE,CAGb0C,IAEIuB,GAAkBhF,YAAOmC,IAAPnC,CAAH,MC5FnB,IAGee,gBAHS,SAAA3C,GAAK,MAAK,CAChC+C,KAAM/C,EAAM+C,QAIZ,CAAEnD,cAFW+C,EA9EjB,SAAgB5C,GAAQ,IAAD,EAEmBqH,oBAAS,GAF5B,oBAEZC,EAFY,KAECC,EAFD,OAIa5F,IAAM0F,SAAS,MAJ5B,oBAIZG,EAJY,KAIFC,EAJE,KAKbvE,EAAOwE,QAAQF,GAMf/D,EAAc,WAClBgE,EAAY,OAYNrF,EAASpC,EAAMgD,KAAfZ,KAGR,OAFAvD,QAAQC,IAAI,OAAQsD,GAGlB,yBAAKuF,OAAQ,CAACC,SAAU,IACrB/I,QAAQC,IAAI,SAAU0I,GACvB,kBAACK,GAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,GAAA,EAAD,KACE,kBAACnH,EAAA,EAAD,CAAYkC,QAAQ,KAAKrB,MAAO,CAACmG,SAAU,IAA3C,gBAIEzE,IAAQf,GACT,kBAACoC,EAAA,EAAD,CAAQV,MAAM,UAAUW,QAAS,kBAAM8C,GAAe,KAAtD,SACA,6BACC,kBAACS,GAAA,EAAD,CACEC,aAAW,0BACXC,gBAAc,cACdC,gBAAc,OACd1D,QApCO,SAAAd,GACjB8D,EAAY9D,EAAMyE,gBAoCRtE,MAAM,WAEN,kBAAC/B,EAAA,EAAD,CAAQN,MAAO,CAAC0D,gBAAiB,WAAY/C,EAAKd,KAAK,KAEzD,kBAAC+G,GAAA,EAAD,CACEjF,GAAG,cACHoE,SAAUA,EACV7C,aAAc,CACZC,SAAU,MACVC,WAAY,SAEdyD,aAAW,EACXC,gBAAiB,CACf3D,SAAU,MACVC,WAAY,SAEd3B,KAAMA,EACN6B,QAAStB,GAET,kBAAC+E,GAAA,EAAD,gBACA,kBAACA,GAAA,EAAD,CAAU/D,QAjDA,WACpBzE,EAAMH,eAgDI,aAIN,kBAAC,GAAD,CAAYyG,UAAWgB,EAAa9B,WAjDxB,WAChB+B,GAAe,GACf9D,a,kBC1BAgF,GAAe,CAAClG,MAAO,ICGrBY,GAAUuF,EAAQ,IAElBD,GAAe,CACjBE,iBAAiB,EACjBvG,KAAM,GACNwG,SAAS,GCRTH,GAAe,GCGNI,gBAAgB,CAC3B9J,KHFW,WAAwC,IAA/BkB,EAA8B,uDAAtBwI,GAAcK,EAAQ,uCAElD,OADAjK,QAAQC,IAAIgK,GACJA,EAAOpJ,MACX,IRPqB,gBQQjB,OAAO,gBACAO,EADP,CAEIsC,MAAOuG,EAAOvG,QAEtB,IRXgB,WQYZ,OAAO,gBACAtC,EADP,CAEIsC,MAAO,CAACuG,EAAO3G,SAAS4G,OAAO9I,EAAMsC,SAE7C,QACI,OAAOtC,IGXf+C,KFMa,WAAsC,IAA7B/C,EAA4B,uDAAtBwI,GAAcK,EAAQ,uCAChD,OAAQA,EAAOpJ,MACb,ITVwB,mBSYpB,OADAb,QAAQC,IAAI,uBAAwBgK,EAAOnJ,SACpC,gBACAM,EADP,CAEI0I,iBAAkBxF,GAAQ2F,EAAOnJ,SACjCyC,KAAM0G,EAAOnJ,UAErB,ITlBoB,eSmBhB,OAAO,gBACAM,EADP,CAEI2I,SAAS,IAEjB,QACI,OAAO3I,IEpBf8F,ODJW,WAAsC,IAA7B9F,EAA4B,uDAAtBwI,GAAcK,EAAQ,uCAChD,OAAQA,EAAOpJ,MACX,IVHkB,aUId,OAAOoJ,EAAOnJ,QAClB,QACI,OAAOM,M,SEKJ+I,GAVDC,aACVC,GACAC,aACIC,aAAgBC,MAChBC,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAAAC,GAAC,OAAIA,KCoCtDC,OA9Bf,WAEE,GAAItK,aAAauK,SAAU,CAEzB,IAAMtL,EAAQe,aAAauK,SAC3BvL,EAAaC,GAEb,IAAMiB,EAAUC,IAAWlB,GAE3B4K,GAAMpK,SAASW,EAAeF,IAE9B,IAAMsK,EAAcC,KAAKC,MAAQ,IAC7BxK,EAAQyK,IAAMH,IAEhBX,GAAMpK,SAASiB,KAEfyJ,OAAOS,SAASC,KAAO,WAI3B,OACE,kBAAC,IAAD,CAAUC,MAAOjB,IACf,kBAAC,GAAD,MACA,kBAAC,GAAD,QCzBctB,QACW,cAA7B4B,OAAOS,SAASG,UAEe,UAA7BZ,OAAOS,SAASG,UAEhBZ,OAAOS,SAASG,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1L,MAAK,SAAA2L,GACJA,EAAaC,gBAEdpL,OAAM,SAAAuH,GACLlI,QAAQkI,MAAMA,EAAM8D,a","file":"static/js/main.02303609.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst setAuthToken = token => {\n    if (token) {\n        axios.defaults.headers.common[\"Authorization\"] = token;\n    } else {\n        delete axios.defaults.headers.common[\"Authorization\"]\n    }\n}\n\nexport default setAuthToken;","import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nimport {\n    GET_ERRORS,\n    SET_CURRENT_USER,\n    USER_LOADING\n} from \"./types\";\n\nexport const registerUser = (userData, closeModalFunc) => dispatch => {\n    const loginData = {\n        email: userData.email,\n        password: userData.password\n    }\n    axios\n        .post(\"/api/users/register\", userData)\n        .then(res => dispatch(loginUser(loginData, closeModalFunc)))\n        .catch(err => \n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        )\n};\n\nexport const loginUser = (userData, closeModalFunc) => dispatch => {\n    console.log(\"LOGGING IN\")\n    axios\n        .post(\"/api/users/login\", userData)\n        .then(res => {\n            const { token } = res.data\n            localStorage.setItem(\"jwtToken\", token);\n            setAuthToken(token);\n            const decoded = jwt_decode(token);\n            closeModalFunc();\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        )\n};\n\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n}\n\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    }\n}\n\nexport const logoutUser = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    setAuthToken(false);\n    dispatch(setCurrentUser({}));\n}","export const GET_ALL_POSTS = \"GET_ALL_POSTS\"\nexport const NEW_POST = \"NEW_POST\"\n\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const USER_LOADING = \"USER_LOADING\";\nexport const SET_CURRENT_USER = \"SET_CURRENT_USER\";","import React from 'react';\nimport styled from 'styled-components';\nimport Typography from '@material-ui/core/Typography';\nimport {Card, CardContent, Avatar, Grid} from '@material-ui/core/';\n\n\nclass Post extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            content: props.content\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.content !== prevProps.content) {\n            this.setState({\n                content: this.props.content\n            })\n        }\n    }\n\n    render() {\n    var colors = [\n        'orange',\n        'green',\n        'red',\n        'blue',\n        'pink',\n    ]\n    \n    var randomcolor = colors[Math.floor(Math.random()*colors.length)];\n    \n    return (\n        <div>\n            <Typography/>\n            <PostCard elevation={2}>\n            <CardContent>\n                <Poster container spacing={5}>\n                    <Grid item>\n                        <StyledAvatar randomcolor={randomcolor}>{this.props.name[0]}</StyledAvatar>\n                    </Grid>\n                    <Grid item>\n                        <Name>\n                            {this.props.name}\n                        </Name>\n                    </Grid>\n                </Poster>\n                \n                <Typography align=\"left\" style={{paddingLeft: '80px'}}>\n                    {this.state.content}\n                </Typography>\n                </CardContent>\n            </PostCard>\n        </div>\n        )\n    }\n  }\n\n\n\nconst PostCard = styled(Card)`\n    min-width: 275px;\n    max-width: 1312px;\n    margin: 8px;\n`\nconst StyledAvatar = styled(Avatar)`\n    background-color: ${props => props.randomcolor}\n`\nconst Poster = styled(Grid)`\n    padding-bottom: 10px;\n`\nconst Name = styled(Typography)`\n    line-height: 40px;\n`\n\nexport default Post;","import axios from 'axios';\n\nexport async function fetchAllPosts() {\n    return axios.get(\"/api/posts/all\")\n        .then(res => res.data)\n        .catch(err => console.log(err))\n}\n\n\nexport async function newPost(content, name, user_id) {\n\n    var newPost = {\n        content: content,\n        user: user_id,\n        name\n    }\n    return axios.post(\"/api/posts/create\", newPost)\n        .then(res => {\n            console.log(\"POST SUCCESS\")\n            return res.data\n        })\n        .catch(err => console.log(err))\n}","import React from 'react'\nimport Post from './Post'\nimport {Grid} from '@material-ui/core'\nimport {fetchAllPosts} from '../api/posts'\nimport {connect} from 'react-redux';\nimport {GET_ALL_POSTS} from '../actions/types'\n\n\nclass PostList extends React.Component {\n\n    componentDidMount() {\n        fetchAllPosts()\n            .then(data => this.props.dispatch({type: GET_ALL_POSTS, posts: data}))\n    }\n    \n    render() {\n        var toRender = this.props.posts || []\n        return (\n            <Grid>\n                {toRender.map( post => (\n                    <Post name={post.name} key={post._id} content={post.content}/>\n                ))}\n            </Grid>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    posts: state.post.posts\n})\n\nexport default connect(mapStateToProps)(PostList)","import React from 'react';\nimport styled from 'styled-components';\nimport {CardContent, Avatar, Grid, TextField, Button, Paper, Snackbar} from '@material-ui/core/';\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport { newPost } from '../api/posts';\nimport {connect} from 'react-redux'\nimport {NEW_POST} from '../actions/types'\nimport isEmpty from 'is-empty';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n  }\n\nclass NewPost extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        const {user} = props.auth\n\n        this.state = {\n            value: '',\n            open: false,\n            name: (isEmpty(user)) ? \"\" : user.name,\n            user_id: (isEmpty(user)) ? \"\" : user.id\n        }\n        \n        this.handleChange = this.handleChange.bind(this)\n        this.onSubmit = this.onSubmit.bind(this)\n        this.setOpen = this.setOpen.bind(this)\n        this.handleClose = this.handleClose.bind(this)\n    }\n\n    setOpen(boolean) {\n        this.setState({open: boolean})\n    }\n    \n    handleClose(event, reason) {\n        this.setOpen(false);\n      };\n\n    handleChange(event) {\n        this.setState({value: event.target.value})\n    }\n\n     onSubmit() {\n        const { user } = this.props.auth;\n        if (isEmpty(user)) {\n            this.setOpen(true)\n        } else {\n            console.log(this.state.name)\n            newPost(this.state.value, this.state.name, this.state.user_id)\n            .then(newPost => {\n                this.props.dispatch({type: NEW_POST, newPost})\n                this.setState({\n                    value: ''\n                })\n                }   \n            )\n        }  \n    }\n\n    render() {\n\n        return (\n            <PostCard>\n                <CardContent>\n                    <Poster container spacing={5}>\n                        <Grid item>\n                            <StyledAvatar color={\"orange\"}>{this.state.name[0]}</StyledAvatar>\n                        </Grid>\n                        <Grid item style={{width: '80%'}}>\n                            <TextField\n                                style={{ margin: 8, paddingTop: 20}}\n                                placeholder=\"What's on your mind?\"\n                                fullWidth\n                                margin=\"normal\"\n                                onChange={this.handleChange}\n                                value={this.state.value}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                                />\n                        </Grid>\n                        <Grid item>\n                            <Button variant=\"contained\" color=\"primary\" onClick={this.onSubmit}>Post</Button>\n                        </Grid>\n                    </Poster>\n                    </CardContent>\n\n                    <Snackbar \n                        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n                        key={`top, center`}\n                        open={this.state.open} \n                        autoHideDuration={4000} \n                        onClose={this.handleClose}\n                        >\n                        <Alert onClose={this.handleClose} severity=\"error\">\n                        You must log in to post to the messageboard.\n                        </Alert>\n                    </Snackbar>\n            </PostCard>\n        );\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth\n})\n\nexport default connect(mapStateToProps)(NewPost);\n\nconst PostCard = styled(Paper)`\n    min-width: 275px;\n    max-width: 1312px;\n    min-height: 125px;\n    margin: 20px;\n`\nconst StyledAvatar = styled(Avatar)`\n    background-color: ${props => props.color}\n`\nconst Poster = styled(Grid)`\n    padding-bottom: 10px;\n`\n\n","import PostList from './PostList'\nimport NewPost from './NewPost'\nimport {Grid} from '@material-ui/core'\nimport React from 'react'\n\n\nconst Home = () => {\n    return (\n        <div style={{backgroundColor: \"grey\", minHeight: '100%', padding: '20px'}}>\n            <Grid align=\"center\" >\n                <NewPost name=\"Jonathan\"/>\n                <PostList/>\n            </Grid>\n       </div>\n    );\n\n}\n\nexport default Home","import React from 'react';\nimport {Dialog, DialogContent, DialogContentText, DialogTitle, TextField, Grid, Button} from '@material-ui/core'\nimport styled from 'styled-components';\nimport { connect } from \"react-redux\";\nimport { registerUser } from \"../actions/authActions\";\nimport { loginUser } from \"../actions/authActions\";\nimport classnames from \"classnames\";\n\n\nclass LoginModal extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            open: false,\n            login: true,\n            purpose: \"Login\",\n            otherPurpose: \"Register\",\n            description: \"Please login to your account or go to 'Register' to create an account.\",\n            name: \"\",\n            email: \"\",\n            password: \"\",\n            password2: \"\",\n            errors: {}\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n          this.setState({\n            errors: nextProps.errors\n          });\n        }\n      }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.modalOpen !== prevProps.modalOpen) {\n            if (this.props.modalOpen) {\n                this.handleOpen()\n            }\n         }\n    }\n\n    handleOpen = () => {\n        this.setState({open: true})\n    }\n    \n    handleClose = () => {\n        this.setState({open: false})\n        this.props.toggleBack()\n    }\n\n    onChange = e => {\n        this.setState({ [e.target.id]: e.target.value })\n    }\n\n    switchPurpose = () => {\n        if (this.state.purpose === \"Login\") {\n            this.setState({\n                login: false,\n                purpose: \"Register\", \n                otherPurpose: \"Login\",\n                description: \"Choose an email and password to create an account.\",\n                errors: {}\n            })\n        } else {\n            this.setState({\n                login: true,\n                purpose: \"Login\", \n                otherPurpose: \"Register\", \n                description: \"Please login to your account or go to 'Register' to create an account.\",\n                errors: {}\n            })\n        }\n\n    }\n\n    onSubmit = () => {\n        if (!this.state.login) {\n            const newUser = {\n                name: this.state.name,\n                email: this.state.email,\n                password: this.state.password,\n                password2: this.state.password2\n              };\n            this.props.registerUser(newUser, this.handleClose); \n        } else {\n            const newUser = {\n                email: this.state.email,\n                password: this.state.password,\n              };\n              this.props.loginUser(newUser, this.handleClose);\n        }\n        \n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <div>\n                {/* <Button variant=\"outlined\" color=\"primary\" onClick={this.handleOpen}>\n                Open Modal\n                </Button> */}\n                <Dialog\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={this.state.open}\n                onClose={this.handleClose}>\n                    <DialogTitle id=\"form-dialog-title\">{this.state.purpose}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText>\n                            <span>{this.state.description}</span>\n                        </DialogContentText>\n\n                        {(!this.state.login) && \n                        <div>\n                        <StyledTextField \n                            id=\"name\" \n                            type=\"text\" \n                            label=\"Name\" \n                            value={this.state.name} \n                            onChange={this.onChange} \n                            error={errors.name}\n                            className={classnames(\"\", {invalid: errors.name})}/>\n                        <span className=\"red-text\">{errors.name}</span>\n                        </div>}\n                        <StyledTextField \n                            id=\"email\" \n                            label=\"E-mail\" \n                            type=\"email\" \n                            value={this.state.email} \n                            onChange={this.onChange} \n                            error={errors.email} \n                            color=\"primary\"/>\n                        <StyledTextField \n                            id=\"password\" \n                            label=\"Password\" \n                            type=\"password\" \n                            value={this.state.password} \n                            onChange={this.onChange} \n                            error={errors.password}/>\n                        {(!this.state.login) && \n                        <StyledTextField \n                            id=\"password2\" \n                            label=\"Confirm password\" \n                            type=\"password\" \n                            value={this.state.password2} \n                            onChange={this.onChange} \n                            error={errors.password2}/>}\n\n\n                    </DialogContent>\n                    <Grid container justify=\"space-between\" >\n                        <Grid item><Button style={{margin: '25px'}} color=\"primary\" onClick={this.switchPurpose}>{this.state.otherPurpose}</Button></Grid>\n                        <Grid item><Button style={{margin: '25px'}} variant=\"contained\" color=\"primary\" onClick={this.onSubmit}>{this.state.purpose}</Button></Grid>\n                    </Grid>\n                </Dialog>\n            </div>\n        )\n\n    }\n\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    errors: state.errors\n  });\n\nexport default connect(\n    mapStateToProps,\n    { registerUser, loginUser }\n)(LoginModal);\n\nconst StyledTextField = styled(TextField)`\n    width: 100%;\n    padding: 15px 15px 15px 0px;\n    margin-top: 25px;\n\n    input:-webkit-autofill,\n    input:-webkit-autofill:hover,\n    input:-webkit-autofill:active,\n    input:-webkit-autofill:focus {\n        -webkit-box-shadow: 0 0 0 1000px white inset !important;\n        -webkit-text-fill-color: #555555 !important;\n    }\n`\n\n\n","import React, {useState} from 'react';\nimport {connect} from 'react-redux'\nimport {AppBar, Typography, Toolbar, Button, IconButton, Avatar, Menu, MenuItem} from '@material-ui/core/';\nimport LoginModal from './LoginModal'\nimport {logoutUser} from '../actions/authActions'\nimport isEmpty from 'is-empty'\n\nfunction NavBar(props) {\n\n    const [toggleModal, setToggleModal] = useState(false)\n    // const [auth, setAuth] = React.useState(true);\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleMenu = event => {\n      setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n\n    const onLogoutClick = () => {\n      props.logoutUser();\n    }\n\n    const exitModal = () => {\n      setToggleModal(false);\n      handleClose();\n    }\n\n    const { user } = props.auth;\n    console.log(\"USER\", user)\n  \n    return (\n      <div styles={{flexGrow: 1}}>\n        {console.log(\"ANCHOR\", anchorEl)}\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" style={{flexGrow: 1}}>\n              MessageBoard\n            </Typography>\n                \n            {(isEmpty(user)) ? \n            (<Button color=\"inherit\" onClick={() => setToggleModal(true)}>Login</Button>) :\n            (<div>\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <Avatar style={{backgroundColor: 'orange'}}>{user.name[0]}</Avatar>\n              </IconButton>\n              <Menu\n                id=\"menu-appbar\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                keepMounted\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'right',\n                }}\n                open={open}\n                onClose={handleClose}\n              >\n                <MenuItem>Profile</MenuItem>\n                <MenuItem onClick={onLogoutClick}>Log Out</MenuItem>\n              </Menu>\n            </div>)\n          }\n          <LoginModal modalOpen={toggleModal} toggleBack={exitModal}/>\n          </Toolbar>\n        </AppBar>\n      </div>\n    );\n  }\n  \n  const mapStateToProps = state => ({\n    auth: state.auth\n  });\n  export default connect(\n    mapStateToProps,\n    { logoutUser }\n  )(NavBar);","import {GET_ALL_POSTS, NEW_POST} from '../actions/types'\n\nconst initialState = {posts: []}\n\nexport default function(state = initialState, action) {\n    console.log(action);\n    switch (action.type) {\n        case GET_ALL_POSTS:\n            return {\n                ...state,\n                posts: action.posts\n            }\n        case NEW_POST:\n            return {\n                ...state,\n                posts: [action.newPost].concat(state.posts)\n            }\n        default: \n            return state\n    }\n}","import {\n    SET_CURRENT_USER,\n    USER_LOADING\n  } from \"../actions/types\";\n\n  const isEmpty = require(\"is-empty\");\n\n  const initialState = {\n      isAuthenticated: false,\n      user: {},\n      loading: false\n  }\n\n  export default function(state=initialState, action) {\n      switch (action.type) {\n        case SET_CURRENT_USER:\n            console.log(\"SETTING CURRENT USER\", action.payload)\n            return {\n                ...state,\n                isAuthenticated: !isEmpty(action.payload),\n                user: action.payload\n            };\n        case USER_LOADING:\n            return {\n                ...state,\n                loading: true\n            };\n        default:\n            return state;\n      }\n  }","import {GET_ERRORS} from \"../actions/types\";\n\nconst initialState = {}\n\nexport default function(state=initialState, action) {\n    switch (action.type) {\n        case GET_ERRORS:\n            return action.payload;\n        default:\n            return state;\n    }\n}","import {combineReducers} from \"redux\";\nimport postReducer from \"./postReducer\";\nimport authReducer from \"./authReducer\";\nimport errorReducer from \"./errorReducer\";\n\nexport default combineReducers({\n    post: postReducer,\n    auth: authReducer,\n    errors: errorReducer\n\n})","import {createStore, compose, applyMiddleware} from 'redux';\nimport rootReducer from './reducers/rootReducer'\nimport thunk from 'redux-thunk';\n\nconst Store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        window.devToolsExtension ? window.devToolsExtension() : f => f\n    )\n)\n\n\n\nexport default Store;","import React from 'react';\n\nimport './App.css';\n\nimport jwt_decode from \"jwt-decode\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport { setCurrentUser, logoutUser } from \"./actions/authActions\";\n\nimport Home from './components/Home'\nimport NavBar from './components/NavBar'\nimport {Provider} from 'react-redux'\nimport Store from './store';\n\n\nfunction App() {\n\n  if (localStorage.jwtToken) {\n    // Set auth token header auth\n    const token = localStorage.jwtToken;\n    setAuthToken(token);\n    // Decode token and get user info and exp\n    const decoded = jwt_decode(token);\n    // Set user and isAuthenticated\n    Store.dispatch(setCurrentUser(decoded));\n  // Check for expired token\n    const currentTime = Date.now() / 1000; // to get in milliseconds\n    if (decoded.exp < currentTime) {\n      // Logout user\n      Store.dispatch(logoutUser());\n      // Redirect to login\n      window.location.href = \"./login\";\n    }\n  }\n\n  return (\n    <Provider store={Store}>\n      <NavBar/>\n      <Home/>\n    </Provider>\n    \n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}